This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-18T07:14:23.092Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
background.js
index.html
manifest.json
popup/oauth2callback.html
popup/popup.html
scripts/popup.js

================================================================
Repository Files
================================================================

================
File: background.js
================
chrome.runtime.onMessageExternal.addListener(
    function(request, sender, sendResponse) {
      if (request.type === 'auth_complete' && request.token) {
        chrome.storage.local.set({ 'access_token': request.token });
      }
    }
  );

================
File: index.html
================
Hello World

================
File: manifest.json
================
{
  "manifest_version": 3,
  "name": "Chrome History in Edge",
  "version": "1.0",
  "description": "View Chrome browsing history in Microsoft Edge",
  "permissions": [
    "storage"
  ],
  "host_permissions": [
    "https://accounts.google.com/*",
    "https://www.googleapis.com/*"
  ],
  "action": {
    "default_popup": "popup/popup.html"
  },
  "background": {
    "service_worker": "background.js"
  },
  "externally_connectable": {
    "matches": ["https://akradovic.github.io/*"]
  }
}

================
File: popup/oauth2callback.html
================
<!DOCTYPE html>
<html>
<head>
    <title>Authentication Complete</title>
</head>
<body>
    <script>
        // Extract token from URL hash
        const params = new URLSearchParams(window.location.hash.substr(1));
        const token = params.get('access_token');
        
        if (token) {
            // Send message to extension
            chrome.runtime.sendMessage('ccbjhoakfgefflkdekckpkdgeghajkmn', {
                type: 'auth_complete',
                token: token
            });
            
            // Close window
            window.close();
        } else {
            document.body.textContent = 'Authentication failed. Please try again.';
        }
    </script>
</body>
</html>

================
File: popup/popup.html
================
<!DOCTYPE html>
<html>
<head>
  <title>Chrome History</title>
  <style>
    body {
      width: 400px;
      padding: 10px;
    }
    .history-item {
      margin: 10px 0;
      padding: 5px;
      border-bottom: 1px solid #eee;
    }
    .login-button {
      padding: 10px;
      background: #4285f4;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    #history-container {
      max-height: 500px;
      overflow-y: auto;
    }
    .error {
      color: red;
      margin: 10px 0;
    }
  </style>
</head>
<body>
  <div id="login-container">
    <button id="login" class="login-button">Sign in with Google</button>
  </div>
  <div id="history-container"></div>
  <script src="../scripts/popup.js"></script>
</body>
</html>

================
File: scripts/popup.js
================
const CLIENT_ID = '144892577505-asqcuvotno6npuf54318hvjich4dkvgk.apps.googleusercontent.com';
const REDIRECT_URI = 'https://akradovic.github.io/popup/oauth2callback';  // Replace with your domain
const SCOPE = 'https://www.googleapis.com/auth/chrome.sync.history';

document.addEventListener('DOMContentLoaded', function() {
  const loginButton = document.getElementById('login');
  const historyContainer = document.getElementById('history-container');
  
  loginButton.addEventListener('click', initiateAuth);
  
  // Check for stored token
  chrome.storage.local.get(['access_token'], function(result) {
    if (result.access_token) {
      fetchHistory(result.access_token);
    }
  });
});

function initiateAuth() {
  const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?` +
    `client_id=${CLIENT_ID}` +
    `&redirect_uri=${encodeURIComponent(REDIRECT_URI)}` +
    `&response_type=token` +
    `&scope=${encodeURIComponent(SCOPE)}`;

  // Open in new tab
  window.open(authUrl, '_blank');
}

function fetchHistory(token) {
  const historyContainer = document.getElementById('history-container');
  document.getElementById('login-container').style.display = 'none';
  
  fetch('https://www.googleapis.com/chrome/sync/v1/history/visits', {
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    }
  })
  .then(response => {
    if (!response.ok) {
      if (response.status === 401) {
        // Token expired or invalid
        chrome.storage.local.remove(['access_token']);
        throw new Error('Authentication expired. Please sign in again.');
      }
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return response.json();
  })
  .then(data => {
    if (data.items && data.items.length > 0) {
      data.items.forEach(item => {
        const historyItem = document.createElement('div');
        historyItem.className = 'history-item';
        
        const title = document.createElement('div');
        title.textContent = item.title || item.url;
        
        const url = document.createElement('a');
        url.href = item.url;
        url.textContent = item.url;
        url.target = '_blank';
        
        const time = document.createElement('div');
        time.textContent = new Date(item.visitTime).toLocaleString();
        
        historyItem.appendChild(title);
        historyItem.appendChild(url);
        historyItem.appendChild(time);
        
        historyContainer.appendChild(historyItem);
      });
    } else {
      historyContainer.textContent = 'No history items found';
    }
  })
  .catch(error => {
    console.error('Error fetching history:', error);
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error';
    errorDiv.textContent = error.message;
    historyContainer.prepend(errorDiv);
    document.getElementById('login-container').style.display = 'block';
  });
}
